version: "3.9"

networks:
    app_network:
        driver: bridge

services:
    nginx:
        build:
            context: ./services/nginx/
            dockerfile: nginx.dockerfile.development
            args:
                - NGINXUSER=${NGINXUSER:-www-data}
                - NGINXGROUP=${NGINXGROUP:-www-data}
        container_name: ${APP_NAME}_nginx
        hostname: nginx
        ports:
            - ${APP_PORT}:80
            - ${APP_PORT_SSL}:443
        volumes:
            - ./src:/var/www:delegated
            - ./logs/nginx:/var/log/nginx/:delegated
            - ./services/certbot/conf:/etc/letsencrypt
            - ./services/certbot/www:/var/www/certbot
        depends_on:
            - php
            # - redis
            - mysql
            # - mailhog
        networks:
            - app_network

    certbot:
        image: certbot/certbot
        container_name: ${APP_NAME}_certbot
        hostname: certbot
        volumes:
            - ./services/certbot/conf:/etc/letsencrypt
            - ./services/certbot/www:/var/www/certbot

    mysql:
        image: mysql:8.0.26
        container_name: ${APP_NAME}_mysql
        hostname: mysql
        restart: unless-stopped
        tty: true
        ports:
            - ${DB_PORT}:3306
        environment:
            - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
            - MYSQL_DATABASE=${DB_DATABASE}
            - MYSQL_USER=${DB_USERNAME}
            - MYSQL_PASSWORD=${DB_PASSWORD}
            - SERVICE_TAGS=dev
            - SERVICE_NAME=mysql
        volumes:
            - ./services/mysql/data:/var/lib/mysql
        networks:
            - app_network

    phpmyadmin:
        image: phpmyadmin
        container_name: ${APP_NAME}_phpmyadmin
        hostname: phpmyadmin
        restart: unless-stopped
        ports:
            - 8888:80
        environment:
            - PMA_ARBITRARY=0
            - PMA_HOST=127.0.0.1
            - PMA_VERBOSE=mysql
            - PMA_PORT=${DB_PORT}
            - PMA_USER=${DB_USERNAME}
            - PMA_PASSWORD=${DB_PASSWORD}
        profiles:
            - donotstart

    adminer:
        image: adminer
        container_name: ${APP_NAME}_adminer
        hostname: adminer
        restart: unless-stopped
        ports:
            - 8889:8080
        profiles:
            - donotstart

    php:
        build:
            context: ./services/php/
            dockerfile: php.dockerfile.development
            args:
                - PHPUSER=${PHPUSER:-www-data}
                - PHPGROUP=${PHPGROUP:-www-data}
        container_name: ${APP_NAME}_php
        hostname: php
        volumes:
            - ./src:/var/www:delegated
        networks:
            - app_network

    redis:
        image: redis:alpine
        container_name: ${APP_NAME}_redis
        hostname: redis
        restart: unless-stopped
        ports:
            - ${REDIS_PORT}:6379
        networks:
            - app_network
        profiles:
            - donotstart

    composer:
        build:
            context: ./services/composer/
            dockerfile: composer.dockerfile.development
            args:
                - PHPUSER=${PHPUSER:-www-data}
                - PHPGROUP=${PHPGROUP:-www-data}
        container_name: ${APP_NAME}_composer
        hostname: composer
        volumes:
            - ./src:/var/www
        working_dir: /var/www
        depends_on:
            - php
        user: ${PHPUSER:-www-data}
        entrypoint: ["composer", "--ignore-platform-reqs"]
        networks:
            - app_network

    npm:
        image: node:14.17.5
        container_name: ${APP_NAME}_npm
        volumes:
            - ./src:/var/www
        ports:
            - 3000:3000
            - 3001:3001
        working_dir: /var/www
        entrypoint: ["npm"]
        networks:
            - app_network

    artisan:
        build:
            context: ./services/php/
            dockerfile: php.dockerfile.development
            args:
                - PHPUSER=${PHPUSER:-www-data}
                - PHPGROUP=${PHPGROUP:-www-data}
        container_name: ${APP_NAME}_artisan
        hostname: artisan
        volumes:
            - ./src:/var/www:delegated
        depends_on:
            - mysql
        working_dir: /var/www
        entrypoint: ["php", "/var/www/artisan"]
        networks:
            - app_network

    mailhog:
        image: mailhog/mailhog:latest
        container_name: ${APP_NAME}_mailhog
        hostname: mailhog
        ports:
            - 1025:1025
            - 8025:8025
        networks:
            - app_network
        profiles:
            - donotstart
